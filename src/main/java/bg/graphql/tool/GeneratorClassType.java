package bg.graphql.tool;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.lang.model.element.Modifier;
import javax.persistence.Entity;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;

import org.reflections.scanners.TypeElementsScanner;

import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeSpec;

import bg.graphql.tool.util.JavaPoetHelper;
import graphql.language.FieldDefinition;
import graphql.language.ListType;
import graphql.language.NonNullType;
import graphql.language.ObjectTypeDefinition;
import graphql.language.Type;

import graphql.language.TypeName;

public class GeneratorClassType {

	ObjectTypeDefinition objectTypeDefinition;
	final TypeSpec.Builder classBuilder;
	String classSimpleName;
	public GeneratorClassType(ObjectTypeDefinition oDefinition) throws Exception {
		this.objectTypeDefinition = oDefinition;
		classSimpleName=objectTypeDefinition.getName();
		//AnnotationSpec.Builder annotationBuilder = AnnotationSpec.builder(Entity.class);
		classBuilder = TypeSpec.classBuilder(  classSimpleName).addModifiers(Modifier.PUBLIC);
		//classBuilder.addAnnotation(annotationBuilder.build());
		for (FieldDefinition fieldDefinition : objectTypeDefinition.getFieldDefinitions()) {
			generateField(fieldDefinition);
		}

	}

	private void generateField(FieldDefinition fieldDefinition) throws Exception {
		Type type = fieldDefinition.getType();
		String name = fieldDefinition.getName();
		String classNameStr = getClassNameFromType( type);
		com.squareup.javapoet.TypeName className = JavaPoetHelper.getClassNameFromGraphQlType(type,PackageNameService.getPackageModelTemp());
		FieldSpec.Builder fieldSpecBuilder = FieldSpec.builder(className, name).addModifiers(Modifier.PRIVATE);
		
		FieldSpec fieldSpec= fieldSpecBuilder.build();
		classBuilder.addField(fieldSpec);
		JavaPoetHelper.addGetterAndSetter(fieldSpec, this.classBuilder);
	}

	private boolean isOneToMany(ClassName className2) {
		if (className2.isPrimitive()) {
			return false;
		}else if (className2.simpleName().indexOf("List")>=0) {
			return true;
		}else  {
			for(String sName : className2.simpleNames()) {
				if (sName.indexOf("List") >=0) {
					return true;
				}
				if (sName.indexOf("Collection") >=0) {
					return true;
				}
			}
			
			
		}
		return false;
	}

	private boolean isOneToOne(ClassName className2) {
		if (className2.isPrimitive()) {
			return false;
		}else if (className2.packageName().startsWith("java")) {
			return false;
		}
		return true;
	}
	

	@Deprecated
	private String getClassNameFromType(Type type) {
		if (type instanceof TypeName) {
			return ((TypeName) type).getName();
		}else if (type instanceof NonNullType) {
			Type type2 =  ((NonNullType) type).getType();
			return getClassNameFromType(type2);
		}else if (type instanceof ListType) {
			ListType lType = (ListType) type;
			String boxed = getClassNameFromType(lType.getType());
			return List.class.getName()+"<"+boxed+">";
		}
		throw new RuntimeException("No class name  for :"+type);
	
	}


	public JavaFile getJavaFileGenerator(String comment2) {

		String comment = " "+this.objectTypeDefinition+"\n";
		comment += " doc :"+comment2+"\n";
        comment += " SourceLocation :"+this.objectTypeDefinition.getSourceLocation();
		comment += "\n";
		classBuilder.addJavadoc(comment);

		final JavaFile.Builder javaFileBuilder = JavaFile.builder(PackageNameService.getPackageModelTemp(), classBuilder.build()).indent("    ");

		javaFileBuilder.addFileComment("Generated by " + this.getClass().getName());
		final JavaFile javaFile = javaFileBuilder.build();
		return javaFile;
	}

}
