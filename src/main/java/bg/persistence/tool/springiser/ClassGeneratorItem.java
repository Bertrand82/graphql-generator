package bg.persistence.tool.springiser;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.lang.model.element.Modifier;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.ManyToOne;
import javax.persistence.PersistenceContext;

import org.hibernate.envers.AuditReader;
import org.hibernate.envers.AuditReaderFactory;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.rest.core.annotation.RepositoryRestResource;
import org.springframework.data.rest.webmvc.RepositoryRestController;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.TypeSpec.Builder;

import bg.graphql.tool.GeneratorClassType;
import bg.graphql.tool.PackageNameService;
import bg.persistence.tool.common.BaseEntity;

/**
 * This class manage one entity
 */
public class ClassGeneratorItem {

	private final Class<?> clazz;
	private final String packageRoot;
	private JavaFile javaFileSourceRepositry;
	private JavaFile javaFilePojoEnhanced;
	private JavaFile javaFileSourceController;

	public ClassGeneratorItem(Class<?> clazz, String packageRoot, String comment) {
		this.clazz = clazz;
		this.packageRoot = packageRoot;
	}

	public String getPackageName() {
		return clazz.getPackage().getName();
	}

	public String getPackagePojo() {
		return packageRoot + ".pojo";
	}

	public String getPackageController() {
		return packageRoot + ".controller";
	}

	public String getPackageRepository() {
		return packageRoot + ".repository";
	}

	public Class<?> getClazz() {
		return clazz;
	}

	public JavaFile getSourcePojo(String packageDest) {
		if (clazz.isEnum()) {
			return getSourceEnhancedFromEnum(packageDest);
		} else {
			return getSourcePojoEnhanced(packageDest);
		}
	}

	private JavaFile getSourceEnhancedFromEnum(String packageDest) {

		Builder pojoBuilder = TypeSpec.enumBuilder(clazz.getSimpleName()).addModifiers(Modifier.PUBLIC);
		pojoBuilder = pojoBuilder.addJavadoc("Pojo Enum Generated by JavaPoet SourceEnhancedFromEnum ");
		Set<Field> fields = Arrays
				.stream(clazz.getDeclaredFields()).filter(x -> (x.getType().getName() != clazz.getName()
						&& !x.getName().startsWith("ENUM$") && !x.getName().startsWith("$VALUES")))
				.collect(Collectors.toSet());
		Set<Field> fieldsEnum = Arrays.stream(clazz.getDeclaredFields()).filter(x -> x.isEnumConstant())
				.collect(Collectors.toSet());

		for (Field field : fieldsEnum) {

			@SuppressWarnings("unused")
			String trace = ("----> | isEnumConstant " + field.isEnumConstant() + " | name : " + field.getName()
					+ " | type: " + field.getType().getSimpleName());
			String listArg = "";
			List<String> listArgValue = new ArrayList<>();
			for (Field f : fields) {
				try {
					Object constante = field.get(clazz);
					Object o = f.get(constante);
					trace += ("| " + f.getType().getSimpleName() + "  : " + o);
					if (f.getType().getSimpleName().equals("String")) {
						o = "\"" + o + "\"";
					}
					listArgValue.add("" + o);
					if (listArg.length() > 0) {
						listArg += ", ";
					}
					listArg += "$L";
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			TypeSpec.Builder typeSpecBuilder = TypeSpec.anonymousClassBuilder(listArg, listArgValue.toArray());

			pojoBuilder = pojoBuilder.addEnumConstant(field.getName(), typeSpecBuilder.build());
		}
		for (Field field : fields) {
			pojoBuilder = pojoBuilder.addField(field.getType(), field.getName(), Modifier.PUBLIC);
		}

		MethodSpec constructorVide = MethodSpec.constructorBuilder().build();
		MethodSpec.Builder constructorBuilder = MethodSpec.constructorBuilder();
		for (Field f : fields) {
			constructorBuilder = constructorBuilder.addParameter(f.getType(), f.getName());
		}
		for (Field f : fields) {
			constructorBuilder = constructorBuilder.addStatement("this." + f.getName() + "=" + f.getName());
		}
		pojoBuilder.addMethod(constructorVide);
		pojoBuilder.addMethod(constructorBuilder.build());
		TypeSpec pojo = pojoBuilder.build();
		JavaFile javaFile = JavaFile.builder(packageDest, pojo).indent("    ").build();
		this.javaFilePojoEnhanced = javaFile;
		return javaFile;
	}

	private JavaFile getSourcePojoEnhanced(String packagename) {

		Builder pojoBuilder = TypeSpec.classBuilder(clazz.getSimpleName()).addModifiers(Modifier.PUBLIC);

		pojoBuilder.addJavadoc("Pojo Generated by JavaPoet : SourcePojoEnhanced v4 \n isVersion :" + isVersion()
				+ "\n managed in orm-mapping.xml");

		// @JsonIdentityInfo( generator = ObjectIdGenerators.PropertyGenerator.class,
		// property = "id")
		AnnotationSpec.Builder annotationBuilder = AnnotationSpec.builder(JsonIdentityInfo.class)
				.addMember("generator", "$T.class", ObjectIdGenerators.PropertyGenerator.class)
				.addMember("property", "\"id\"");
		pojoBuilder.addAnnotation(annotationBuilder.build());
		TypeName superClass;
		if (clazz.getSuperclass() == null) {
			superClass = ClassName.get(BaseEntity.class);
		} else if (clazz.getSuperclass() == Object.class) {
			superClass = ClassName.get(BaseEntity.class);
		} else {
			superClass = ClassName.get(packagename, clazz.getSuperclass().getSimpleName());
		}
		
		pojoBuilder = pojoBuilder.superclass(superClass)
				.addJavadoc("Pojo Generated by JavaPoet : SourcePojoEnhanced \n isVersion :" + isVersion());

		boolean hasId_ = false;
		for (Field field : clazz.getDeclaredFields()) {
			String name = getFieldName(field);
			if (name.equals("id")) {
				hasId_ = true;
				// "id" is set in the super class
			} else {
				FieldSpec fieldSpec;
				if (field.getGenericType().getTypeName().indexOf(PackageNameService.getPackageModelTemp()) > 0) {
					FieldSpec.Builder fieldSpecBuilder;
					if (field.getGenericType() instanceof Class) {
						Class<?> c = (Class<?>) field.getGenericType();
						ClassName classNameField = ClassName.get(packagename, c.getSimpleName());

						fieldSpecBuilder = FieldSpec.builder(classNameField, name, Modifier.PROTECTED);

					} else if (field.getGenericType() instanceof ParameterizedType) {
						ParameterizedType tt = (ParameterizedType) field.getGenericType();
						Class<?> rawType = ((Class<?>) tt.getRawType());
						TypeName mapOfStringAndClassOfAny = ParameterizedTypeName.get(ClassName.get(rawType),
								ClassName.get(packagename, getFirstParamType(tt).getSimpleName()));
						fieldSpecBuilder = FieldSpec.builder(mapOfStringAndClassOfAny, name, Modifier.PROTECTED);

					} else { // Should not happen
						ClassName classNameField = ClassName.get(Object.class);
						fieldSpecBuilder = FieldSpec.builder(classNameField, name, Modifier.PROTECTED);
					}

					fieldSpec = fieldSpecBuilder.build();
				} else {
					TypeName typeName = ClassName.get(getPackagePojo(), field.getType().getSimpleName());
					fieldSpec = FieldSpec.builder(typeName, name, Modifier.PROTECTED).build();
				}
				pojoBuilder = pojoBuilder.addField(fieldSpec);
				pojoBuilder.addMethod(MethodGenerator.getGetMethodSpec(name, fieldSpec.type));
				pojoBuilder.addMethod(MethodGenerator.getSetMethodSpec(name, fieldSpec.type));
			}
		}

		// AnnotationSpec annotationVersioningFilter =
		// AnnotationSpec.builder(JsonFilter.class).addMember("\"versioning\"","").build()
		// ;
		// AnnotationSpec annotationVersioningFilter =
		// AnnotationSpec.builder(Entity.class).build();

		// TypeSpec pojo =
		// pojoBuilder.addAnnotation(annotationVersioningFilter).build();
		TypeSpec pojo = pojoBuilder.build();
		JavaFile javaFile = JavaFile.builder(packagename, pojo).indent("    ").build();
		this.javaFilePojoEnhanced = javaFile;
		return javaFile;
	}

	private Class<?> getFirstParamType(ParameterizedType type) {
		ParameterizedType t = (ParameterizedType) type;
		for (Type tt : t.getActualTypeArguments()) {
			return ((Class<?>) tt);
		}

		return Object.class;
	}

	public boolean isHistorisable() {
		Annotation[] annotatations = (clazz.getDeclaredAnnotations());
		for (Annotation at : annotatations) {
			if (at.annotationType().getSimpleName().equalsIgnoreCase("historisable")) {
				return true;
			}
		}
		return false;
	}

	private String getFieldName(Field field) {
		String name = field.getName();
		return name != null && name.equals(name.toUpperCase()) ? name.toLowerCase() : name;
	}

	private Class<?> getTypeId() {
		try {
			Field field = this.clazz.getField("id");
			return field.getType();
		} catch (NoSuchFieldException e) {
			System.err.println("No Field id for : " + this.clazz.getName());
			return String.class;
		}
	}

	public JavaFile getSpringSourceRepository() {

		AnnotationSpec annotationRepositoryRestResource = AnnotationSpec.builder(RepositoryRestResource.class).build();
		TypeName tpnamePojo = ClassName.get(javaFilePojoEnhanced.packageName, javaFilePojoEnhanced.typeSpec.name);

		ParameterizedTypeName superClass = ParameterizedTypeName.get(ClassName.get(JpaRepository.class), tpnamePojo,
				ClassName.get(getTypeId()));

		TypeSpec interfacePoc = TypeSpec.interfaceBuilder(clazz.getSimpleName() + "Repository")
				.addModifiers(Modifier.PUBLIC).addAnnotation(annotationRepositoryRestResource)
				.addSuperinterface(superClass)
				.addJavadoc(
						"Generated  with JavaPoet : ClassGenerator SpringSourceRepository isVersion :" + isVersion())
				.build();
		String packagename = getPackageRepository();
		JavaFile javaFile = JavaFile.builder(packagename, interfacePoc).indent("    ").build();
		this.javaFileSourceRepositry = javaFile;
		return javaFile;
	}

	public JavaFile getSpringSourceController_() {

		AnnotationSpec annotationRepositoryRestResource = AnnotationSpec.builder(RepositoryRestController.class)
				.build();

		AnnotationSpec annotationGetByIdMapping = AnnotationSpec.builder(GetMapping.class)
				.addMember("path", "\"/" + toPathFormat(clazz.getSimpleName()) + "s/{id}\"").build();
		AnnotationSpec annotationResponseBody = AnnotationSpec.builder(ResponseBody.class).build();

		TypeName tpnameRepository = ClassName.get(javaFileSourceRepositry.packageName,
				javaFileSourceRepositry.typeSpec.name);
		FieldSpec fieldRepository = FieldSpec.builder(tpnameRepository, "repository", Modifier.PRIVATE)
				.addAnnotation(Autowired.class).build();

		AnnotationSpec annotationPath = AnnotationSpec.builder(PathVariable.class).build();

		ParameterSpec paramId = ParameterSpec.builder(String.class, "id").addAnnotation(annotationPath).build();

		MethodSpec methodGetOne = MethodSpec.methodBuilder("getOneById").addModifiers(Modifier.PUBLIC)
				.addAnnotation(annotationGetByIdMapping).addAnnotation(annotationResponseBody).addParameter(paramId)
				.returns(getTypeClazz()).addStatement("return  repository.getOne(id)").build();

		AnnotationSpec annotationGetMapping = AnnotationSpec.builder(GetMapping.class)
				.addMember("path", "\"/" + toPathFormat(clazz.getSimpleName()) + "s\"").build();

		AnnotationSpec annotationPageable = AnnotationSpec.builder(PageableDefault.class).build();

		ParameterSpec pageable = ParameterSpec.builder(Pageable.class, "pageable").addAnnotation(annotationPageable)
				.build();

		MethodSpec methodList = MethodSpec.methodBuilder("list").addModifiers(Modifier.PUBLIC)
				.addAnnotation(annotationGetMapping).addAnnotation(annotationResponseBody).addParameter(pageable)
				.returns(ParameterizedTypeName.get(ClassName.get(List.class), getTypeClazz()))
				.addStatement("return  repository.findAll(pageable).getContent()").build();

		TypeSpec interfacePoc = TypeSpec.classBuilder(clazz.getSimpleName() + "Controller")
				.addModifiers(Modifier.PUBLIC).addAnnotation(annotationRepositoryRestResource)
				.addJavadoc("Generated by bg2 with JavaPoet : SpringSourceController isVersion :" + isVersion())
				.addMethod(methodList).addMethod(methodGetOne).addField(fieldRepository).build();
		String packagename = getPackageController();
		JavaFile javaFile = JavaFile.builder(packagename, interfacePoc).indent("    ").build();
		this.javaFileSourceController = javaFile;
		return javaFile;
	}

	private String toPathFormat(String name) {
		String first = ("" + name.charAt(0)).toLowerCase();
		String name_1 = name.substring(1);
		return first + name_1;
	}

	public JavaFile getSpringSourceControllerForEnum(String packagename) {

		AnnotationSpec annotationRepositoryRestResource = AnnotationSpec.builder(RestController.class).build();

		AnnotationSpec annotationGetMapping = AnnotationSpec.builder(GetMapping.class)
				.addMember("path", "\"" + clazz.getSimpleName().toLowerCase() + "/list/\"").build();

		MethodSpec listTaskRevisions = MethodSpec.methodBuilder("list").addModifiers(Modifier.PUBLIC)
				.addAnnotation(annotationGetMapping)
				.returns(ParameterizedTypeName.get(ClassName.get(List.class), getTypeClazz()))
				.addStatement("return $T.asList( $T.values())", Arrays.class, getTypeClazz()).build();

		TypeSpec controllerEnum = TypeSpec.classBuilder(clazz.getSimpleName() + "Controller")
				.addModifiers(Modifier.PUBLIC).addAnnotation(annotationRepositoryRestResource)
				.addJavadoc("Generated by bg3 with JavaPoet SourceControllerForEnum \n isVersion " + isVersion())
				.addMethod(listTaskRevisions).build();

		JavaFile javaFile = JavaFile.builder(packagename, controllerEnum).indent("    ").build();

		return javaFile;
	}

	public boolean isVersion() {
		String[] ss = getPackageName().split("\\.");
		boolean isVersion = false;
		if (ss.length == 0) {
			isVersion = false;
		} else {
			String last = ss[ss.length - 1];
			isVersion = last.startsWith("v");
		}
		return isVersion;
	}

	public JavaFile getSpringSourceHistoryRepository(String packagename) {

		AnnotationSpec annotationRepositoryRestResource = AnnotationSpec.builder(Repository.class).build();

		FieldSpec entityManager = FieldSpec.builder(EntityManager.class, "entityManager", Modifier.PRIVATE)
				.addAnnotation(PersistenceContext.class).build();

		MethodSpec listTaskRevisions = MethodSpec.methodBuilder("listTaskRevisions").addModifiers(Modifier.PUBLIC)
				.addParameter(Long.class, "id")
				.returns(ParameterizedTypeName.get(ClassName.get(List.class), getTypeClazz()))
				.addStatement("final $T auditReader =  $T.get(entityManager)", AuditReader.class,
						AuditReaderFactory.class)
				.addStatement("final $T revisions = auditReader.getRevisions(" + clazz.getSimpleName() + ".class, id)",
						ParameterizedTypeName.get(List.class, Number.class))
				.addStatement("final $T list = new $T<>()",
						ParameterizedTypeName.get(ClassName.get(List.class), getTypeClazz()), ArrayList.class)
				.addStatement(
						"for (final Number revision : revisions) {\n $T o =  auditReader.find(" + clazz.getSimpleName()
								+ ".class , id, revision);\n"
								+ " o.setModificationTime(auditReader.getRevisionDate(revision));  \n" + "list.add(o)",
						getTypeClazz())
				.addStatement("}").addStatement("return list").build();

		TypeSpec interfacePoc = TypeSpec.classBuilder(clazz.getSimpleName() + "HistoryRepository")
				.addModifiers(Modifier.PUBLIC)

				.addAnnotation(annotationRepositoryRestResource)
				.addJavadoc(
						"History repository Generated by bg4 with JavaPoet : SpringSourceHistoryRepository isVersion : "
								+ isVersion())
				.addField(entityManager).addMethod(listTaskRevisions).build();

		JavaFile javaFile = JavaFile.builder(packagename, interfacePoc).indent("    ").build();

		return javaFile;
	}

	public JavaFile getSpringSourceHistoryControler(String packagename, JavaFile repository) {

		AnnotationSpec annotationRestController = AnnotationSpec.builder(RestController.class).build();
		AnnotationSpec annotationRepositoryRestController = AnnotationSpec.builder(RepositoryRestController.class)
				.build();

		TypeName tpnameRepository = ClassName.get(repository.packageName, repository.typeSpec.name);
		FieldSpec aircraftTypeHistoryRepository = FieldSpec.builder(tpnameRepository, "repository", Modifier.PRIVATE)
				.addAnnotation(Autowired.class).build();

		AnnotationSpec annotationGetMapping = AnnotationSpec.builder(GetMapping.class)
				.addMember("path", "\"history/" + clazz.getSimpleName().toLowerCase() + "/{id}\"").build();
		ParameterSpec param = ParameterSpec.builder(Long.class, "id").addAnnotation(PathVariable.class).build();
		MethodSpec listTaskRevisions = MethodSpec.methodBuilder("getHistory").addModifiers(Modifier.PUBLIC)
				.addParameter(param).addAnnotation(annotationGetMapping)
				.returns(ParameterizedTypeName.get(ClassName.get(List.class), getTypeClazz()))
				.addStatement("return repository.listTaskRevisions(id)").build();

		TypeSpec interfacePoc = TypeSpec.classBuilder(clazz.getSimpleName() + "HistoryControler")
				.addModifiers(Modifier.PUBLIC)

				.addAnnotation(annotationRepositoryRestController).addAnnotation(annotationRestController)
				.addJavadoc("History Controler Generated by bg6 with JavaPoet : SpringSourceHistoryControler")
				.addField(aircraftTypeHistoryRepository).addMethod(listTaskRevisions).build();

		JavaFile javaFile = JavaFile.builder(packagename, interfacePoc).indent("    ").build();

		return javaFile;
	}

	private ClassName getClassNAme(JavaFile javaFile) {
		return ClassName.get(javaFile.packageName, javaFile.typeSpec.name);
	}

	private ClassName getTypeClazz() {

		return getClassNAme(this.javaFilePojoEnhanced);
	}

	public String toString() {
		return "ClassEntityItem " + this.clazz.getName();
	}

}
